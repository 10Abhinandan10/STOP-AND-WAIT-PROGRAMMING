import time import netpack as npk
 data='RCCIIT ECE' frame_data=[i for i in data] 
ack_data='ACK
 # Sender Method: 
def sender(tx_socket,rx_addr):
 global frame_data
 global ack_data
 for msg in frame_data:
 time.sleep(2)
 # Tx frame :
 npk.send_data_to_udp_client(tx_socket, msg, rx_addr)
 print('[SENT] frame data - [{}]'.format(msg))
 # Wait to Rx ACK frame:
 while True:
 (msg_rx, addr)=npk.read_data_from_udp_client(tx_socket)
 if msg_rx==ack_data:
 print('[ACK] Received for - [{}]'.format(msg)) break
 # Tx NULL character to end connection:
 npk.send_data_to_udp_client(tx_socket,'\0',rx_addr)
 print('Terminate communication.')
 return 
# Receiver Method:
 def receiver(rx_socket, tx_ADDR): 
global ack_data 
rx_frame=[] 
while True:
 # Rx frame : 
(msg_rx, ADDR)=npk.read_data_from_udp_server(rx_socket)
 if msg_rx=='\0':
 print('Communication terminated') break 
Else:
 rx_frame.append(msg_rx) 
print('[RECV] frame data - [{}]'.format(msg_rx))
 npk.send_data_to_udp_server(rx_socket, ack_data, tx_ADDR)
 print('[SENT] Ack frame') 
print("[=] Received Data :") 
for i in rx_frame: 
print('{}'.format(i),end= ')
 print("\n")
 Return

TX 

import netpack as npk
 import stop_wait as smn
 # Settings:
 PORT=9090
 SERVER="127.0.0.1"
ADDR=(SERVER,PORT) 
# Step-1: 
tx=npk.create_udp_socket()
 # Step-2:
 npk.start_udp_server(tx, ADDR)
 # Waiting for Rx to connect:
 print('-'*50+'\n Tx is ready to accept client ...') 
# Capture "Hello" message from client: 
while True:
 (msg, addr)=npk.read_data_from_udp_client(tx)
 if msg=='Hello':
 print('[Connected] Client : {}'.format(addr))
 Break
 # Invoke sender method:
 smn.sender(tx, addr)
 # Close socket object: 
npk.close_socket_connection(tx) 
print('[SENDER] Process is finished')

RX 

import netpack as npk
 import stop_wait as smn
 # Settings:
 PORT=9090 SERVER="127.0.0.1"
 ADDR=(SERVER,PORT)
 # Step-1:

 rx=npk.create_udp_socket() 
print('[=] Client is connecting to IP & PORT at Server side {}'.format(ADDR)) 
# Connect client socket object to PORT with hello message:
 npk.send_data_to_udp_server(rx, "Hello", ADDR)
 # Invoke receiver method: smn.receiver(rx, ADDR) 
# Close socket object:
 npk.close_socket_connection(rx)

